<?xml version="1.0" encoding="UTF-8"?><record_update sys_domain="global" table="sys_script">
    <sys_script action="INSERT_OR_UPDATE">
        <abort_action>false</abort_action>
        <access>package_private</access>
        <action_delete>false</action_delete>
        <action_insert>true</action_insert>
        <action_query>false</action_query>
        <action_update>true</action_update>
        <active>false</active>
        <add_message>false</add_message>
        <advanced>true</advanced>
        <change_fields>false</change_fields>
        <client_callable>false</client_callable>
        <collection>x_ltin2_uw_ai_fso_uw_case</collection>
        <condition/>
        <description/>
        <execute_function>false</execute_function>
        <filter_condition table="x_ltin2_uw_ai_fso_uw_case">assigned_toISNOTEMPTY^EQ<item endquery="false" field="assigned_to" goto="false" newquery="false" operator="ISNOTEMPTY" or="false" value=""/>
            <item endquery="true" field="" goto="false" newquery="false" operator="=" or="false" value=""/>
        </filter_condition>
        <is_rest>false</is_rest>
        <message/>
        <name>FSO Underwriting Case - UW case summary</name>
        <order>99999</order>
        <priority>100</priority>
        <rest_method/>
        <rest_method_text/>
        <rest_service/>
        <rest_service_text/>
        <rest_variables/>
        <role_conditions/>
        <script><![CDATA[(function executeRule(current, previous) /*null when async*/ {
	var context = Object.assign({"use_case_id":"faa5d5be93ec62108b8674121bba10c2"}, {
        taskRecordId: current.sys_id.toString(),
        taskRecordTable: current.sys_class_name.toString()
    });
    var trigger = {"trigger_id":"e04699fe93ec62108b8674121bba1069","run_as":"assigned_to"};
    var isDiffConsumer = true;
    var runAsUser = trigger["run_as"];
	var execPlanGr = sn_aia.TriggerRuntimeUtil.getExecutionPlansByTaskAndUsecase(context.taskRecordTable, context.taskRecordId, context.use_case_id);
    while (execPlanGr.next()) {
        if ([sn_aia.AIAgentConstants.CONVERSATION_STATE.CHAT_IN_PROGRESS, sn_aia.AIAgentConstants.CONVERSATION_STATE.OPEN].includes(execPlanGr.conversation.state.toString()) && sn_aia.TriggerRuntimeUtil.isSameConsumer(execPlanGr.conversation.consumer.user_id.toString(), current, runAsUser)) {
            isDiffConsumer = false;
        } else {
            sn_aia.TriggerRuntimeUtil.terminateExecutionPlanAndConversation(execPlanGr);
        }
    }
    sn_aia.TriggerRuntimeUtil.invokeAIATrigger(isDiffConsumer, runAsUser, current, context, trigger);
})(current, previous);]]></script>
        <sys_class_name>sys_script</sys_class_name>
        <sys_created_by>rohit</sys_created_by>
        <sys_created_on>2025-03-31 12:42:23</sys_created_on>
        <sys_domain>global</sys_domain>
        <sys_domain_path>/</sys_domain_path>
        <sys_id>3876d9fe93ec62108b8674121bba1052</sys_id>
        <sys_mod_count>1</sys_mod_count>
        <sys_name>FSO Underwriting Case - UW case summary</sys_name>
        <sys_overrides/>
        <sys_package display_value="underwriter.ai" source="x_ltin2_uw_ai">5365c533935496d08b8674121bba10e7</sys_package>
        <sys_policy/>
        <sys_scope display_value="underwriter.ai">5365c533935496d08b8674121bba10e7</sys_scope>
        <sys_update_name>sys_script_3876d9fe93ec62108b8674121bba1052</sys_update_name>
        <sys_updated_by>vinitha</sys_updated_by>
        <sys_updated_on>2025-04-01 11:22:13</sys_updated_on>
        <template/>
        <when>async_always</when>
    </sys_script>
    <sys_translated_text action="delete_multiple" query="documentkey=3876d9fe93ec62108b8674121bba1052"/>
</record_update>
