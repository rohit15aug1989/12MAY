<?xml version="1.0" encoding="UTF-8"?><record_update sys_domain="global" table="sys_script">
    <sys_script action="INSERT_OR_UPDATE">
        <abort_action>false</abort_action>
        <access>package_private</access>
        <action_delete>false</action_delete>
        <action_insert>false</action_insert>
        <action_query>false</action_query>
        <action_update>true</action_update>
        <active>true</active>
        <add_message>false</add_message>
        <advanced>true</advanced>
        <change_fields>false</change_fields>
        <client_callable>false</client_callable>
        <collection>x_ltin2_uw_ai_underwriting_coverage</collection>
        <condition/>
        <description/>
        <execute_function>false</execute_function>
        <filter_condition table="x_ltin2_uw_ai_underwriting_coverage">limitsVALCHANGES^ORpremium_rateVALCHANGES^ORschedule_modifierVALCHANGES^ORdeductibleVALCHANGES^EQ<item endquery="false" field="limits" goto="false" newquery="false" operator="VALCHANGES" or="false" value=""/>
            <item endquery="false" field="premium_rate" goto="false" newquery="false" operator="VALCHANGES" or="true" value=""/>
            <item endquery="false" field="schedule_modifier" goto="false" newquery="false" operator="VALCHANGES" or="true" value=""/>
            <item endquery="false" field="deductible" goto="false" newquery="false" operator="VALCHANGES" or="true" value=""/>
            <item endquery="true" field="" goto="false" newquery="false" operator="=" or="false" value=""/>
        </filter_condition>
        <is_rest>false</is_rest>
        <message/>
        <name>Calculate Coverages Premium</name>
        <order>100</order>
        <priority>100</priority>
        <rest_method/>
        <rest_method_text/>
        <rest_service/>
        <rest_service_text/>
        <rest_variables/>
        <role_conditions/>
        <script><![CDATA[(function executeRule(current, previous /*null when async*/ ) {
    var totalPremiumcoverage = 0;
    //var Limit= Math.round(parseFloat(current.getValue('limits')));
    var Limit = parseFloat((current.limits || "0").replace(/[^0-9.]/g, ''));
    var rate = current.premium_rate;
    var schedule = current.schedule_modifier;
    var Roundoff = (Math.round(parseFloat(Limit) / 1000) * 1000);
    // var rate =current.getValue('premium_rate');
    //var schedule =getValue('schedule_modifier');
    var totalPremium = ((Roundoff * (rate / 100)));
    current.premium = ((totalPremium) * (schedule));

//     var gr = new GlideRecord('x_ltin2_uw_ai_underwriting_coverage');

//   gr.query();
//   while (gr.next()) {
//       totalPremiumcoverage += parseFloat(gr.premium);
//       var taxrate = gs.getProperty('x_ltin2_uw_ai.Tax Rate');
//       var total_premium = (totalPremiumcoverage) * (taxrate);
//       gs.info("total_premium:" + total_premium);

//   }
//   current.total_premium = totalPremiumcoverage;
//   current.coverage_premium = total_premium;
//   current.adjusted_premium = ((totalPremiumcoverage) + (total_premium));
//   gs.info("coverage:" + current.adjusted_premium);
//   current.update();
//current.setWorkflow(false);
 // Reflect changes on the case
    // Assuming the case record has a reference to the coverage table
    // var caseRecord = new GlideRecord('x_ltin2_uw_ai_fso_uw_case'); // Replace with your case table name
    // if (current.customer_id) { // Assuming the coverage has a reference field to the case
    //     caseRecord.get(current.customer_id);
 
    //     if (caseRecord.isValidRecord()) {

    //      gs.info("caserecord:" +caseRecord.covegare.total_premium);
    //         // The case record will automatically reflect the updated coverage details because it references fields in the coverage table.
    //         // No need to directly update the case record fields unless there are other calculated fields that you need to manually update.
 
    //         // For example, if you want to store total premiums directly on the case:
    //      caseRecord.covegare.total_premium=current.totalPremiumcoverage;
    //         caseRecord.covegare.total_coverage_premium = current.total_premium;
    //         caseRecord.covegare.adjusted_coverage_premium = current.adjusted_premium;
 
    //         caseRecord.update(); // Save changes to the case record, if necessary
    //     }
    // }

    
})(current, previous);
]]></script>
        <sys_class_name>sys_script</sys_class_name>
        <sys_created_by>barla.praveenkumar</sys_created_by>
        <sys_created_on>2024-09-11 04:17:17</sys_created_on>
        <sys_domain>global</sys_domain>
        <sys_domain_path>/</sys_domain_path>
        <sys_id>effadc4a93a896108b8674121bba10f0</sys_id>
        <sys_mod_count>127</sys_mod_count>
        <sys_name>Calculate Coverages Premium</sys_name>
        <sys_overrides/>
        <sys_package display_value="underwriter.ai" source="x_ltin2_uw_ai">5365c533935496d08b8674121bba10e7</sys_package>
        <sys_policy/>
        <sys_scope display_value="underwriter.ai">5365c533935496d08b8674121bba10e7</sys_scope>
        <sys_update_name>sys_script_effadc4a93a896108b8674121bba10f0</sys_update_name>
        <sys_updated_by>rohit</sys_updated_by>
        <sys_updated_on>2025-04-19 13:15:29</sys_updated_on>
        <template/>
        <when>before</when>
    </sys_script>
    <sys_translated_text action="delete_multiple" query="documentkey=effadc4a93a896108b8674121bba10f0"/>
    <sys_es_latest_script action="INSERT_OR_UPDATE">
        <id>effadc4a93a896108b8674121bba10f0</id>
        <sys_created_by>barla.praveenkumar</sys_created_by>
        <sys_created_on>2024-09-11 04:17:16</sys_created_on>
        <sys_id>b54b108a93a896108b8674121bba10fc</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_updated_by>barla.praveenkumar</sys_updated_by>
        <sys_updated_on>2024-09-11 04:17:16</sys_updated_on>
        <table>sys_script</table>
        <use_es_latest>true</use_es_latest>
    </sys_es_latest_script>
</record_update>
